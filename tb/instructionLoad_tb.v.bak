`timescale 1ns / 1ns

module instructionLoad_tb;

    // DUT Inputs
    reg clk;
    reg rst;
    reg [31:0] r_instruction;
    reg [2:0] r_load_address;
    reg r_data_sent;
    reg [31:0] r_load_instruction;

    // DUT Outputs
    wire o_write_enable;
    wire i_write_enable;
    wire [3:0] o_address;
    wire [31:0] o_instruction;

    // Instantiate the DUT
    instructionLoad il1 (
        .clk(clk),
        .rst(rst),
        .i_data_received(r_data_sent),
        .i_instruction(r_instruction),
        .o_write_enable(o_write_enable),
        .o_address(o_address),
        .o_instruction(o_instruction)
    );

    instructionFetch if1(
        .clk(clk),
        .rst(rst),
        .i_write_enable(o_write_enable),
        .i_load_address(o_address),
        .i_load_instruction(o_instruction)
    );

    // Generate clock signal
    always begin
        #5 clk = ~clk;  // Toggle clock every 5 time units
    end

    // TEST INSTRUCTION LOAD
    initial begin
        // Initialize signals
        rst = 1'b0;  
        clk = 0;
        r_instruction = 32'b0;
        r_data_sent = 1'b0;
        
        #15;         // Hold reset high for 15ns
        rst = 1'b1;  // Deassert reset

        // Test sequence
        #10;
        r_instruction = 32'd5;
        r_data_sent = 1'b1;

        #20;
        r_data_sent = 1'b0;

        #50;
        $finish;  // End simulation
    end

    initial begin
        // Initialize signals
    end

    //test il1 write enable, if2 write enable, if2 states, if2 program memory
endmodule
